Given an integer numRows, return the first numRows of Pascal's triangle.

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> ans;
        if(numRows==0)
            return ans;
        ans.push_back({1});
        if(numRows == 1)
        return ans;
        ans.push_back({1,1});
        if(numRows==2)
            return ans;
        for(int i=3;i<=numRows;i++)
        {
            vector<int> vec;
            vec.push_back(1);
            for(int j = 0;j<i-2;j++)
            {
                vec.push_back(ans[i-2][j]+ans[i-2][j+1]);
            }
            vec.push_back(1);
            ans.push_back(vec);
        }
        return ans;
    }
};

// to remember
Just go with the definition. First fill first two rows manually and then
loop for rest of the rows. In reality we only need previous rows values to get the values of next row


// efficient approach
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> ans(numRows);
        for(int i =0;i<numRows;i++)
        {
            ans[i].resize(i+1);
            ans[i][0]=ans[i][i]=1;
            for(int j=1;j<i;j++)
            {
                ans[i][j] = ans[i-1][j-1] + ans[i-1][j];
            }
        }
        return ans;
    }
};
