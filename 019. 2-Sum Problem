Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        unordered_map<int,int> m;
        for(int i=0;i<nums.size();i++)
        {
            if(m.find(target-nums[i])!=m.end())
            {
                ans.push_back(i);
                ans.push_back(m[target-nums[i]]);
                return ans;
            }
            else
                m.insert({nums[i],i});
        }
        return ans;
    }
};

// to remember 
at one point you might think of this as the 2 pointer solution but
for that the array should by sorted and if we try to sort the array we would 
loose our indexes. Thus we simply need to do a hashmap solution which takes care of previous 
elements and their indices as we procede the search in the window
