You have been given a 2-D array 'MAT' of size M x N where 'M' and 'N' 
denote the number of rows and columns, respectively. The elements of 
each row are sorted in non-decreasing order.

Moreover, the first element of a row is greater than the last element
of the previous row (if exists).

You are given an integer 'TARGET' and your task is to find if it exists
in the given 'MAT' or not.

Approach 1:
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int r = 0,c = matrix[0].size() - 1;
        while(r<matrix.size() && c>=0)
        {
            if(matrix[r][c]==target)
                return true;
            if(target<matrix[r][c])
                c--;
            else
                r++;
        }
        return false;
    }
};
//to remember
Start from any corner but here i have preffered top right corner then move down or left depending 
on the value of the target, if we go out of range then the target is not found else it will eventually 
be found.

Approach 2:

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.size()==0)
            return false;
        int n = matrix.size();
        int m = matrix[0].size();
        int low = 0,high = m*n-1,mid,r,c;
        while(low<=high)
        {
            mid = low+(high-low)/2;
            r = mid/m;c=mid%m;
            if(target==matrix[r][c])
                return true;
            if(target<matrix[r][c])
                high = mid-1;
            else
                low = mid+1;
        }
        return false;
    }
};
// to remember
we can imagine this whole 2-D matrix to be a linear matix starting from index 0 and going till m*n-1.
Now simply perform binary search in this range, the main observation is to get the row and column indices back from 
linear type, to do so we will see than row number will be mid/(no.of columns in original matrix) and column number will be mid%(no.of columns in original matrix).
