Given the head node of the singly linked list, return a pointer pointing to the middle of the linked list.
If there are an odd number of elements, return the middle element if there are even elements return the one which is farther from the head node.

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        //take two pointers slow and fast
        ListNode *slow = head, *fast = head;
        
        // take the conditions after observing which node is required in case of even and odd lengths
        while(fast!=NULL && fast->next!=NULL)
        {
            slow = slow->next; // slow moves one step forward at a time
            fast = fast->next->next; // and fast moves two steps at a time
        }
        
        //return the slow pinter as this will be the head of the middle 
        return slow;
    }
};
