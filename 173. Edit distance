Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character

efficient approach:

class Solution {
    int util(string a,string b,int i,int j,vector<vector<int>> &dp){
        if(i==-1) return j+1;
        if(j==-1) return i+1;
        
        if(dp[i][j] != -1)
            return dp[i][j];
        
        if(a[i]==b[j])
            return dp[i][j] = util(a,b,i-1,j-1,dp);
        
        return dp[i][j] = 1 + min(util(a,b,i,j-1,dp),min(util(a,b,i-1,j,dp),util(a,b,i-1,j-1,dp)));
    }
public:
    int minDistance(string word1, string word2) {
        int n=word1.size(),m=word2.size();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        
        return util(word1,word2,n-1,m-1,dp);
    }
};

//to remember
start from end of both the strings if both chars are equal move left 
if not get the minimum of all three operations performed on string a
