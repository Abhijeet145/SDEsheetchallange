Given a set of N jobs where each jobi has a deadline and profit associated with it.

Each job takes 1 unit of time to complete and only one job can be scheduled at a time. We earn the profit associated with job if and only if the job is completed by its deadline.

Find the number of jobs done and the maximum profit.

Note: Jobs will be given in the form (Jobid, Deadline, Profit) associated with that Job.

Efficient approach:

class Solution 
{
    static bool comp(Job a,Job b){
        return a.profit>b.profit;
    }
    public:
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
        int count = 0,profit=0;
        sort(arr,arr+n,comp);//sort as per maximum profit first
        vector<bool> occupied(n,false);
        
        for(int i=0;i<n;i++){
            for(int j=min(n,arr[i].dead)-1;j>=0;j--){
                if(occupied[j] == false){
                    occupied[j] = true;
                    count++;
                    profit += arr[i].profit;
                    break;
                }
            }
        }
        return {count,profit};
    } 
};

//to remember
sort as per maximum profit
make an array to rember if a day was occupied or not
fill the first slot you see empty coming from deadline to it's left

