Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

Efficient approach:

class Solution {
    void util(vector<int> &c, vector<vector<int>> &ans, vector<int> &curr,int t,int ind){
        if(t<0 || ind == c.size()) return;
        if(t==0){
            ans.push_back(curr);
            return;
        }
        util(c,ans,curr,t,ind+1);//not take
        curr.push_back(c[ind]);
        util(c,ans,curr,t-c[ind],ind);//take 
        curr.pop_back();
    }
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> curr;
        util(candidates,ans,curr,target,0);
        return ans;
    }
};

//to remember
just do simple pick and not pick thing
but as we can take a number as many times we want we do not increase our index when we take.
