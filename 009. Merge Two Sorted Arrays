Given two sorted arrays arr1[] and arr2[] of sizes n and m in non-decreasing order. Merge them in sorted order without using any extra space. Modify arr1 so that it contains the first N elements and modify arr2 so that it contains the last M elements.
 

class Solution{

    public:
        //GAP method
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            // code here 
            int gap =ceil((double)(m+n)/2);
            while(1)
            {
                int i = 0,j = gap;
                while(j<(m+n))
                {
                    int a = i<n?arr1[i]:arr2[i-n],
                        b = j<n?arr1[j]:arr2[j-n];
                    if(a>b)
                    {
                        int temp = a;
                        if(j<n)
                        {
                            arr1[i] = b;
                            arr1[j] = a;
                        }
                        else if(i<n)
                        {
                            arr1[i] = b;
                            arr2[j-n] = a;
                        }
                        else
                        {
                            arr2[i-n] = b;
                            arr2[j-n] = a;
                        }
                    }
                    i++;
                    j++;
                }
                if(gap==1)
                break;
                gap = ceil((double)gap/2);
            }
        } 
};

//using gap method gap has gap-1 gaps and always take ceil.
//if elements at boundary are not in order swap them

class Solution{
    public:
        //Function to merge the arrays.
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            // code here 
             int i=0,j=0,k=n-1;
       while(i<=k && j<m)
       {
            if(arr1[i]>arr2[j])
            {
                swap(arr1[k],arr2[j]);
                j++;
                k--;
            }
            else
            i++;
       }
       sort(arr1,arr1+n);
       sort(arr2,arr2+m);
        } 
};

// This approach involves using three pointers and taking the points and basically place elements into the groups they belong
// do dry run to get a better feel of this apporach


