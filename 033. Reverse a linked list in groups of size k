Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

class Solution {
    //function to reverse a linked list
    void reverse(ListNode *root)
    {
        ListNode* prev = NULL,*curr = root;
        while(curr)
        {
            ListNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
    }
    
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(k==1 || head==NULL)//edge cases
        return head;

        bool flag = true;//to mark the head

        ListNode* curr = head,*prevtail=NULL,*next,*currhead;

        while(curr)
        {
            currhead = curr;//current head of the section
            for(int i=1;i<k;i++)//here we move k-1 steps ahead 
            {
                if(curr->next!=NULL) // unitl there is next element present
                curr = curr->next;
                else // if group of size k is not possible we have to leave that as it was
                {
                    prevtail->next = currhead; // so we link our currhead to the next of previous tail
                    return head; // then return the head
                }
            }
  
            if(flag) // to appoint the head of the reversed linked list
            {
                head = curr;
                flag = false;
            }
            else // else change the previous tail to curr which will point at the end of the current section
                prevtail->next = curr;

            next = curr->next; // get the next element
            curr->next = NULL; // remove current section so as to ease our reverse process and it knows where to stop
            curr = next; // now move the curr to the next section

            reverse(currhead); // reverse the current portion

            prevtail = currhead; // current section's head will become tail for next section after reversing
        }
        return head;        
    }
};

// solution is commented already to get the feel try doing a dry run with some examples
