Given an integer array nums, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements 
without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence 
of the array [0,3,1,6,2,2,7].

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
       int n = nums.size();
       if(n==1)
         return 1;
       vector<int> dp(n,0);
       dp[0] = 1;
       int res = 1;
       for(int i=1;i<n;i++)
       {
           int longest = 0;
           for(int j = i-1;j>=0;j--)
           {
               if(nums[j]<nums[i])
               longest = max(longest,dp[j]);
           }
           dp[i] = longest + 1;
           res = max(res,dp[i]);
       }
       return res;
    }
};

// to remember
Think of DP
if we are at index i and we have the results of all the indices before i.
Then we can go back and check for the longest subsequences ending with a value less than value at index i
and get the value for current index.
Do this for every index and the maximum will be the result.
