There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

 

// DP optimised solution:

class Solution {
public:
    int uniquePaths(int m, int n)
    {
        vector<int> prev(n,1),curr(n);
        for(int i=1;i<m;i++)
        {
            curr[0]=1;
            for(int j=1;j<n ; j++)
            {
                curr[j]=prev[j]+curr[j-1];
            }
            prev = curr;
        }
        return prev[n-1];
    }
};

// nCr observaton based solution:

class Solution {
public:
    int uniquePaths(int m, int n)
    {
        int N = m+n-2;
        int R = min(m,n) - 1;
        double res = 1;
        // NcR is the total unique paths
        for(int i=1;i<=R;i++)
            res = res*(N - R + i)/i;
        
        return (int)res;
    }
};

// observation 
to reach bottom we need to take m-1 right steps and n-1 down steps
so we have to choose m-1 or n-1 steps out m+n-2 places.

