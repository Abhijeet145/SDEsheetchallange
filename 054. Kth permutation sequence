The set [1, 2, 3, ..., n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Efficient approach:
class Solution {
public:
    string getPermutation(int n, int k) {
        vector<int> v(n);
        long long fact = 1;
        for(int i=0;i<n;i++){
            v[i] = i+1;
            fact *= (i+1);
        }
        fact/=n;//factorial of n-1
        k--;
        string ans="";
        while(1){
            int curr_index = k/fact;
            ans += to_string(v[curr_index]);
            v.erase(v.begin()+curr_index);
            if(v.size()==0) break;
            k %= fact;
            fact = fact/v.size();
        }
        
        return ans;
    }
};

//to remember
Here we use the observation that any number can have (n-1)! possible numbers starting from it and thus get the number at that index reduce k and remove that element from vector and do it recursively. Reduce k by 1 as we are using 0 based indexing.
