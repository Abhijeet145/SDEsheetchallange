Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

Efficient Solution:

class Solution {
    void util(vector<int> &c,vector<vector<int>>&ans,vector<int> &curr,int t,int ind){
        if(t<0)return;
        if(t==0){
            ans.push_back(curr);
            return;
        }
        int prev = -1;
        for(int i=ind;i<c.size();i++){
            if(c[i] != prev){
                curr.push_back(c[i]);
                prev = c[i];
                util(c,ans,curr,t-c[i],i+1);
                curr.pop_back();
            }
        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> ans;
        vector<int> curr;
        util(candidates,ans,curr,target,0);
        return ans;
    }
};

//to remember
sort the candidates
at every level just take unique elements from ind till last recusively
