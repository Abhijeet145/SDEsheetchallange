A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the
permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array 
is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the 
lowest possible order (i.e., sorted in ascending order).


class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        
        int n = nums.size();
        if(n<=1)
            return;
        int i=n-2,j=n-1;
        while(i>=0 )
        {
            if(nums[i]<nums[i+1])
                break;
            i--;
        }
        if(i>=0)
        {
            while(j>i )
            {
               if(nums[j]>nums[i]) 
                   break;
                j--;
            } 
            swap(nums[i],nums[j]);
            reverse(nums.begin()+i+1,nums.end());
        }
        else
        {
            reverse(nums.begin(),nums.end());
        }
    }
};
//see from back side to find the first decreasing element and then find the element from right just greater than this element swap them and then reverse element next to it
// For this found element all the words are in decreasing order i.e. it has had its maximum 
// So next greater element is repalced with it
// and that has to have the smmalest possible combination
// 1 3 5 4 2
// here for 3 , 3<5 then 4>3
// swap them 1 4 -- 5 3 2
// to make 5 3 2 minimum we just need to reverse them
