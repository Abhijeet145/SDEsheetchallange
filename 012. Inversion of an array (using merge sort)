Count the total number of inversions in an unsorted array. An inversion is if i<j and A[i] > A[j].

 
void merge(long long *arr,long long *temp,int left,int mid,int right,int &ans)
{
    int i = left;
    int j = mid;
    int k = left;
    while((i <= mid-1) && (j <= right)){
        if(arr[i] <= arr[j]){
            temp[k++] = arr[i++];
        }
        else
        {
            temp[k++] = arr[j++];
            ans += (mid - i);
        }
    }

    while(i <= mid - 1)
        temp[k++] = arr[i++];

    while(j <= right)
        temp[k++] = arr[j++];

    for(i = left ; i <= right ; i++)
        arr[i] = temp[i];
}

void merge_Sort(long long *arr,long long *temp,int left,int right,int &ans)
{
    if(right > left)
    {
        int mid = (left + right)/2;

        merge_Sort(arr,temp,left,mid,ans);
        merge_Sort(arr,temp,mid+1,right,ans);

        merge(arr,temp,left,mid+1,right,ans);
    }
}
long long getInversions(long long *arr, int n){
    // Write your code here.
    int ans=0;
    long long *temp = new long long[n];
    merge_Sort(arr,temp,0,n-1,ans);
    return ans;
}


// we can use a bruteforce method which will basically take O(N^2) time
// we can use the process of merge sort to understand the logic behind counting the total number of inversions
// whenever we find A[i]>A[j] while merging two sorted arrays we add total number right to the array into our answer as this condition would be true for all the
// numbers present on the right side also.


